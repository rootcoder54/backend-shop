// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  firstName     String?
  lastName      String?
  birthDate     DateTime?
  address       String?
  city          String?
  postalCode    String?
  country       String?
  username      String?        @unique
  email         String?        @unique
  password      String?
  telephone     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          UserRole       @relation(fields: [roleId], references: [id])
  roleId        String         @unique
  shop          Shop           @relation(fields: [shopId], references: [id])
  shopId        String
  notifications Notification[]
  commandes     Commande[]
}

model UserRole {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  access      Access[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Access {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  UserRole    UserRole @relation(fields: [userRoleId], references: [id])
  userRoleId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shop {
  id           String           @id @default(uuid())
  name         String           @unique
  description  String?
  address      String?
  city         String?
  postalCode   String?
  country      String?
  telephone    String?
  email        String?
  website      String?
  logo         String?
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  users        User[]
  clients      Client[]
  commandes    Commande[]
  fournisseurs Fournisseur[]
  produits     Produit[]
  categories   Categorie[]
  mouvements   MouvementStock[]
}

model Client {
  id        String     @id @default(uuid())
  nom       String
  email     String?
  telephone String?
  adresse   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  commandes Commande[]
  shop      Shop?      @relation(fields: [shopId], references: [id])
  shopId    String?
}

model Fournisseur {
  id        String    @id @default(uuid())
  nom       String
  email     String?
  telephone String?
  adresse   String?
  produits  Produit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shop      Shop?     @relation(fields: [shopId], references: [id])
  shopId    String?
}

model Produit {
  id            String           @id @default(uuid())
  nom           String
  description   String?
  prix          Float
  quantite      Int
  fournisseurId String?
  fournisseur   Fournisseur?     @relation(fields: [fournisseurId], references: [id])
  categorieId   String?
  categorie     Categorie?       @relation(fields: [categorieId], references: [id])
  images        Image[]
  commande      Commande[]
  mouvements    MouvementStock[]
  shop          Shop?            @relation(fields: [shopId], references: [id])
  shopId        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  produit   Produit? @relation(fields: [produitId], references: [id])
  produitId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categorie {
  id          String    @id @default(uuid())
  nom         String
  description String?
  image       String?
  produits    Produit[]
  shop        Shop?     @relation(fields: [shopId], references: [id])
  shopId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MouvementStock {
  id        String        @id @default(uuid())
  type      TypeMouvement
  quantite  Int
  date      DateTime      @default(now())
  note      String?
  produit   Produit       @relation(fields: [produitId], references: [id])
  produitId String
  shop      Shop?         @relation(fields: [shopId], references: [id])
  shopId    String?
}

model Notification {
  id        String   @id @default(uuid())
  titre     String
  message   String
  lu        Boolean  @default(false)
  data      Json?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Commande {
  id           String    @id @default(uuid())
  dateCommande DateTime  @default(now())
  clients      Client[]
  produits     Produit[]
  remise       Float     @default(0)
  total        Float     @default(0)
  status       String    @default("En attente")
  note         String?
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  shop         Shop?     @relation(fields: [shopId], references: [id])
  shopId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum TypeMouvement {
  ENTREE
  SORTIE
}
